// Code generated by MockGen. DO NOT EDIT.
// Source: D:\code\GOcode\basic-go\webook\internal\service\sms\types.go
//
// Generated by this command:
//
//	mockgen -source=D:\code\GOcode\basic-go\webook\internal\service\sms\types.go -package=smsmocks -destination=D:\code\GOcode\basic-go\webook\internal\service\sms\mocks\types.mock.go
//

// Package smsmocks is a generated GoMock package.
package smsmocks

import (
	sms "basic-go/webook/internal/service/sms"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockService) Send(ctx context.Context, tplId string, args []string, numbers ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tplId, args}
	for _, a := range numbers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockServiceMockRecorder) Send(ctx, tplId, args any, numbers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tplId, args}, numbers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockService)(nil).Send), varargs...)
}

// MockServiceV1 is a mock of ServiceV1 interface.
type MockServiceV1 struct {
	ctrl     *gomock.Controller
	recorder *MockServiceV1MockRecorder
}

// MockServiceV1MockRecorder is the mock recorder for MockServiceV1.
type MockServiceV1MockRecorder struct {
	mock *MockServiceV1
}

// NewMockServiceV1 creates a new mock instance.
func NewMockServiceV1(ctrl *gomock.Controller) *MockServiceV1 {
	mock := &MockServiceV1{ctrl: ctrl}
	mock.recorder = &MockServiceV1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceV1) EXPECT() *MockServiceV1MockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockServiceV1) Send(ctx context.Context, tplId string, args []sms.NameValue, numbers ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tplId, args}
	for _, a := range numbers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockServiceV1MockRecorder) Send(ctx, tplId, args any, numbers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tplId, args}, numbers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockServiceV1)(nil).Send), varargs...)
}
